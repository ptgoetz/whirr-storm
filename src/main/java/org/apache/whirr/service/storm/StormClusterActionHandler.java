package org.apache.whirr.service.storm;

import com.google.common.base.Function;
import com.google.common.base.Joiner;
import com.google.common.collect.Lists;
import org.apache.commons.configuration.Configuration;
import org.apache.whirr.Cluster;
import org.apache.whirr.ClusterSpec;
import org.apache.whirr.service.ClusterActionEvent;
import org.apache.whirr.service.ClusterActionHandlerSupport;
import org.apache.whirr.service.FirewallManager;
import org.jclouds.scriptbuilder.domain.Statements;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.*;

import static org.apache.whirr.RolePredicates.role;
import static org.jclouds.scriptbuilder.domain.Statements.call;

public abstract class StormClusterActionHandler extends ClusterActionHandlerSupport {
    private static final Logger LOG = LoggerFactory.getLogger(StormClusterActionHandler.class);
    public static final String STORM_PREFIX = "whirr-storm.";


    @Override
    protected void beforeBootstrap(ClusterActionEvent event) throws IOException {
        ClusterSpec clusterSpec = event.getClusterSpec();
        Configuration conf = clusterSpec.getConfiguration();


        addStatement(event, call("retry_helpers"));
        addStatement(event, call("configure_hostnames"));

        addStatement(event, call(getInstallFunction(conf, "java", "install_openjdk")));

        addStatement(event, call("install_supervisord"));

        String dlUrl = conf.getString("whirr.storm.zip.url");
        if(dlUrl == null || dlUrl.trim().equals("")){
            throw new IllegalArgumentException("A value for 'whirr.storm.zip.url' must be specified.");
        }

        addStatement(event, call("install_storm", dlUrl));

    }

    @Override
    protected void beforeConfigure(ClusterActionEvent event)
            throws IOException, InterruptedException {
        Cluster cluster = event.getCluster();

        writeStormConfig(event);

        Set<Cluster.Instance> all = cluster.getInstancesMatching(role("storm-nimbus"));
        LOG.info("Found {} instances with role 'storm-nimbus'.", all.size());
        addZkFirewalRules(all, event);
        Set<Cluster.Instance> supervisors = cluster.getInstancesMatching(role("storm-supervisor"));
        LOG.info("Found {} instances with role 'storm-supervisor'.", supervisors.size());
        addZkFirewalRules(supervisors, event);

        addNimbusFirewalRules(supervisors, event);

        Set<Cluster.Instance> uis = cluster.getInstancesMatching(role("storm-ui"));
        LOG.info("Found {} instances with role 'storm-ui'.", uis.size());

        addNimbusFirewalRules(uis, event);

    }

    private void addNimbusFirewalRules(Set<Cluster.Instance> instances, ClusterActionEvent event) throws IOException {
        Cluster cluster = event.getCluster();
        for(Cluster.Instance instance : instances){
            event.getFirewallManager().addRule(
                    FirewallManager.Rule.create()
                            .source(instance.getPublicAddress().getHostAddress())
                            .destination(cluster.getInstancesMatching(role("storm-nimbus")))
                            .port(6627)
            );
        }
    }

    private void addZkFirewalRules(Set<Cluster.Instance> instances, ClusterActionEvent event) throws IOException {
        Cluster cluster = event.getCluster();
        for(Cluster.Instance instance : instances){
            event.getFirewallManager().addRule(
                    FirewallManager.Rule.create()
                            .source(instance.getPublicAddress().getHostAddress())
                            .destination(cluster.getInstancesMatching(role("zookeeper")))
                            .port(2181)
            );
        }
    }

    private void writeStormConfig(ClusterActionEvent event) throws IOException {
        List<String> stormConfig = new ArrayList<String>();
        stormConfig.add("# Storm Configuration");
        stormConfig.add("# Generated by whirr-storm (https://github.com/ptgoetz/whirr-storm)");


        Configuration conf = event.getClusterSpec().getConfiguration();
        Cluster cluster = event.getCluster();

        // nimbus host
        Cluster.Instance nimbusInstance = cluster.getInstanceMatching(role(StormNimbusClusterActionHandler.ROLE));
        stormConfig.add(String.format("nimbus.host: \"%s\"", nimbusInstance.getPublicHostName()));

        // zookeeper
        Set<Cluster.Instance> ensemble = cluster.getInstancesMatching(role("zookeeper"));
        List<String> zks = getPublicIps(ensemble);
        stormConfig.add("storm.zookeeper.servers:");
        for(String zk : zks){
            stormConfig.add(String.format("    - \"%s\"", zk));
        }

        Iterator it = conf.getKeys();
        while(it.hasNext()) {

            String keyStr = (String)it.next();
            if(keyStr.startsWith(STORM_PREFIX)){
                Object val = conf.getProperty(keyStr);
                String stormKey = keyStr.substring(STORM_PREFIX.length());
                if(stormKey.equals("nimbus.host") || stormKey.equals("storm.zookeeper.servers")){
                    LOG.warn("Ignoring value for '{}' since it is determined automatically by whirr.");
                    continue;
                }
                if(val instanceof List){
                    stormConfig.add(String.format("%s: ", stormKey));
                    List valList = (List)val;
                    for(Object v : valList){
                        // single item lists can be forced by appending a comma at the end:
                        // whirr-storm.foo=bar,
                        // supress empty list items what would result
                        if(!v.toString().trim().equals("")){
                            stormConfig.add(String.format("    - %s", v));
                        }
                    }
                } else {
                    stormConfig.add(String.format("%s: %s", stormKey, val));
                }
            }


        }

        for(String str : stormConfig){
            LOG.info(str);
        }

        addStatement(event, Statements.createOrOverwriteFile("/etc/storm/storm.yaml", stormConfig));
    }


    private List<String> getPublicIps(Set<Cluster.Instance> instances) {
        return Lists.transform(Lists.newArrayList(instances),
                new Function<Cluster.Instance, String>() {
                    @Override
                    public String apply(Cluster.Instance instance) {
                        return instance.getPublicIp();
                    }
                });
    }

    @Override
    protected void beforeStart(ClusterActionEvent event) {
        addStatement(event, call("start_storm"));
    }

    @Override
    protected void beforeStop(ClusterActionEvent event) {
        addStatement(event, call("stop_storm"));
    }
}
